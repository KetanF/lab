from keras.datasets import imdb
from tabulate import tabulate

(train_data,train_label),(test_data,test_label) = imdb.load_data(num_words=10000)

import numpy as np

def vectorize_sequences(sequences,dimensions=10000):
    results = np.zeros((len(sequences),dimensions))
    for i,sequence in enumerate(sequences):
        results[i,sequence]=1

    return results

x_train = vectorize_sequences(train_data)
x_test = vectorize_sequences(test_data)

y_train = np.asarray(train_label).astype('float32')
y_test= np.asarray(test_label).astype('float32')

from keras.models import Sequential
from keras.layers import Dense

model = Sequential()

model.add(Dense(16,input_shape=(10000,),activation='relu'))
model.add(Dense(16,activation = 'relu'))
model.add(Dense(1,activation = 'sigmoid'))

model.compile(optimizer='adam',loss='mse',metrics=['accuracy'])

model.summary()

history = model.fit(x_train,y_train,validation_split=0.2,epochs=20,verbose=1,batch_size=512)

mse,mae = model.evaluate(x_test,y_test)

print('MSE ',mse)
print('MAE ',mae)

y_preds = model.predict(x_test)

y_preds



y_test

tests=[]
for i in y_test:
    tests.append(int(i))
word_index = imdb.get_word_index()

# Generate predictions
y_preds = model.predict(x_test)
reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])
# Convert predictions and actual labels to lists
tests = [int(label) for label in y_test]
preds = [1 if pred > 0.5 else 0 for pred in y_preds]

# Prepare data for tabulation
reviews = []
reviews = []
for i in range(len(test_data)):
    review = ' '.join([reverse_word_index.get(i - 3, '<UNK>') for i in test_data[i]])
    actual_sentiment = 1 if y_test[i] > 0.5 else 0
    predicted_sentiment = preds[i]
    reviews.append([review[:50], actual_sentiment, predicted_sentiment])

# Display reviews in tabular format
headers = ["Review", "Actual Sentiment", "Predicted Sentiment"]
print(tabulate(reviews, headers=headers))

from sklearn.metrics import accuracy_score,precision_score,recall_score

print(accuracy_score(tests,preds))
print(precision_score(tests,preds))
print(recall_score(tests,preds))
